import os
import logging
import requests
import signal
from threading import Lock
from typing import Dict, Any
from datetime import datetime
from dotenv import load_dotenv
from functools import lru_cache
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackContext


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

CHOOSING, TYPING_WAREHOUSE, TYPING_BOX_TYPE, CHOOSING_COEFFICIENT = range(4)


class Bot:
    def __init__(self, token: str, api_key: str, admin_channel_id: str):
        self.updater = Updater(token, use_context=True)
        self.api_key = api_key
        self.admin_channel_id = admin_channel_id
        self.dp = self.updater.dispatcher
        self.user_data_lock: Lock = Lock()
        self.user_data: Dict[int, Dict[str, Any]] = {}
        self.warehouses: Dict[str, str] = self.load_warehouses(api_key)

        self.dp.bot_data['API_KEY'] = api_key
        self.dp.bot_data['ADMIN_CHANNEL_ID'] = admin_channel_id

        self.register_handlers()

    def register_handlers(self) -> None:
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                CHOOSING: [MessageHandler(Filters.regex('^–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞$'), self.choose_action)],
                TYPING_WAREHOUSE: [MessageHandler(Filters.text & ~Filters.command, self.receive_warehouse)],
                TYPING_BOX_TYPE: [MessageHandler(Filters.regex('^[0-9]{1,2}$'), self.select_delivery_type)],
                CHOOSING_COEFFICIENT: [MessageHandler(Filters.text & ~Filters.command, self.receive_coefficient)]
            },
            fallbacks=[CommandHandler('cancel', self.cancel)]
        )

        self.dp.add_handler(conv_handler)
        self.dp.add_handler(CommandHandler('cancel', self.cancel))

    def start(self, update: Update, context: CallbackContext) -> int:
        user_id = update.effective_user.id
        with self.user_data_lock:
            if user_id in self.user_data:
                update.message.reply_text('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.')
                return ConversationHandler.END

        # –°–æ–æ–±—â–µ–Ω–∏–µ-–æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
        description = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∫–ª–∞–¥–æ–≤ WB.\n"
            "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö\n"
            "- –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
            "- –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏"
        )
        update.message.reply_text(description)

        reply_keyboard = [['–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞']]
        update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –ù–∞–∂–º–∏—Ç–µ –∫–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞" üëá:',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return CHOOSING

    def choose_action(self, update: Update, context: CallbackContext) -> int:
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¢—É–ª–∞ –∏–ª–∏ –ö–æ–ª–µ–¥–∏–Ω–æ):')
        return TYPING_WAREHOUSE

    def receive_warehouse(self, update: Update, context: CallbackContext) -> int:
        warehouse_name = update.message.text.strip().lower()
        matching_warehouses = [w for w in self.warehouses.items() if warehouse_name in w[1].lower()]

        if not matching_warehouses:
            update.message.reply_text('–°–∫–ª–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return TYPING_WAREHOUSE
        elif len(matching_warehouses) > 1:
            keyboard = [[f"{name} (ID: {id})" for id, name in matching_warehouses]]
            update.message.reply_text(
                '–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∫–ª–∞–¥–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π:',
                reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            )
            return TYPING_WAREHOUSE
        else:
            warehouse_id, warehouse_name = matching_warehouses[0]
            context.user_data['warehouse_id'] = warehouse_id
            context.user_data['warehouse_name'] = warehouse_name

            reply_keyboard = [[str(i) for i in range(11)]]
            update.message.reply_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (0-10):',
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
            return TYPING_BOX_TYPE

    def select_delivery_type(self, update: Update, context: CallbackContext) -> int:
        context.user_data['max_coefficient'] = int(update.message.text)

        reply_keyboard = [['–ö–æ—Ä–æ–±–∞', '–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã', '–°—É–ø–µ—Ä—Å–µ–π—Ñ'], ['QR-–ø–æ—Å—Ç–∞–≤–∫–∞ —Å –∫–æ—Ä–æ–±–∞–º–∏']]
        update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )

        return CHOOSING_COEFFICIENT

    def receive_coefficient(self, update: Update, context: CallbackContext) -> int:
        user_id = update.effective_user.id
        box_type_name = update.message.text

        max_coefficient = context.user_data['max_coefficient']
        warehouse_id = context.user_data['warehouse_id']
        warehouse_name = context.user_data['warehouse_name']

        self.start_monitoring(update, context, user_id, warehouse_id, warehouse_name, max_coefficient, box_type_name)
        return ConversationHandler.END

    def start_monitoring(self, update: Update, context: CallbackContext, user_id: int, warehouse_id: str, warehouse_name: str, max_coefficient: int, box_type_name: str) -> None:
        with self.user_data_lock:
            self.user_data[user_id] = {
                'warehouse_id': warehouse_id,
                'warehouse_name': warehouse_name,
                'max_coefficient': max_coefficient,
                'box_type_name': box_type_name,
                'last_coefficients': {}
            }
        message = f'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—á–∞—Ç –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_name}. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö –æ—Ç 0 –¥–æ {max_coefficient} —Å —Ç–∏–ø–æ–º –ø–æ—Å—Ç–∞–≤–∫–∏ {box_type_name}.'
        update.message.reply_text(message, reply_markup=ReplyKeyboardRemove())
        context.job_queue.run_repeating(self.check_coefficient, interval=11, first=0, context=user_id)

    def check_coefficient(self, context: CallbackContext) -> None:
        user_id = context.job.context
        with self.user_data_lock:
            if user_id not in self.user_data:
                return
            warehouse_id = self.user_data[user_id]['warehouse_id']
            warehouse_name = self.user_data[user_id]['warehouse_name']
            max_coefficient = self.user_data[user_id]['max_coefficient']
            box_type_name = self.user_data[user_id]['box_type_name']

        url = 'https://supplies-api.wildberries.ru/api/v1/acceptance/coefficients'
        api_key = context.bot_data['API_KEY']
        headers = {
            'Authorization': f'Bearer {api_key}'
        }
        params = {
            'warehouseIDs': warehouse_id,
            'boxTypeName': box_type_name
        }

        try:
            response = requests.get(url, params=params, headers=headers)
            response.raise_for_status()
            data = response.json()

            if data:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –ø–æ—Å—Ç–∞–≤–∫–∏: –∫–æ—Ä–æ–±, –º–æ–Ω–æ–ø–∞–ª–µ—Ç –∏ —Ç.–ø.
                box_types = [item for item in data if item['boxTypeName'] == box_type_name]

                if not box_types:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    self.send_error_message(context, user_id, f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {box_type_name}.')
                    return

                # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, –∏—Å–∫–ª—é—á–∞—è -1 –∏ —Ç–µ, —á—Ç–æ –±–æ–ª—å—à–µ max_coefficient
                coefficients = {
                    int(item['coefficient']): item['date']
                    for item in box_types
                    if int(item['coefficient']) != -1 and 0 <= int(item['coefficient']) <= max_coefficient
                }

                with self.user_data_lock:
                    last_coefficients = self.user_data[user_id]['last_coefficients']
                    for coef, date in coefficients.items():
                        if coef in last_coefficients and last_coefficients[coef] == date:
                            continue
                        formatted_date = datetime.fromisoformat(date.replace('Z', '+00:00')).strftime('%d.%m.%Y')
                        message = f'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n–°–∫–ª–∞–¥: {warehouse_name}\n–î–∞—Ç–∞: {formatted_date}\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {coef}\n–¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏: {box_type_name}'

                        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
                        keyboard = [[InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", url="https://seller.wildberries.ru/supplies-management/all-supplies")]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
                        context.bot.send_message(chat_id=user_id, text=message, reply_markup=reply_markup)

                    self.user_data[user_id]['last_coefficients'] = coefficients
            else:
                self.send_error_message(context, user_id, f'–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        except requests.HTTPError as http_err:
            error_message = f'–û—à–∏–±–∫–∞ HTTP: {http_err}'
            if response.status_code == 401:
                error_message = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.'
            elif response.status_code == 404:
                error_message = f'–°–∫–ª–∞–¥ {warehouse_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.'
            self.send_error_message(context, user_id, error_message)
        except requests.RequestException as req_err:
            self.send_error_message(context, user_id, f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {req_err}')
        except Exception as e:
            self.send_error_message(context, user_id, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}')

    def send_error_message(self, context: CallbackContext, user_id: int, error_message: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        context.bot.send_message(chat_id=user_id, text=error_message)
        self.send_error_to_admin(error_message, context)

    def send_error_to_admin(self, error_message: str, context: CallbackContext) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        admin_channel_id = context.bot_data['ADMIN_CHANNEL_ID']
        context.bot.send_message(chat_id=admin_channel_id, text=f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {error_message}")

    @lru_cache(maxsize=1)
    def get_warehouses(self, api_key: str) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        url = 'https://supplies-api.wildberries.ru/api/v1/warehouses'
        headers = {'Authorization': f'Bearer {api_key}'}

        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            data = response.json()

            return {warehouse['ID']: warehouse['name'] for warehouse in data}
        except requests.RequestException as e:
            logger.warning(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: {str(e)}')
            return {}

    def load_warehouses(self, api_key: str) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤."""
        return self.get_warehouses(api_key)

    def cancel(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel."""
        user_id = update.effective_user.id
        with self.user_data_lock:
            if user_id in self.user_data:
                del self.user_data[user_id]
                for job in context.job_queue.get_jobs_by_name(str(user_id)):
                    job.schedule_removal()
                update.message.reply_text('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.')
            else:
                update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.')
        return ConversationHandler.END

    def signal_handler(self, signum, frame) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        self.updater.stop()
        self.updater.is_idle = False

    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)

        self.updater.start_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        self.updater.idle()


def main() -> None:
    load_dotenv()

    TG_TOKEN = os.getenv('TELEGRAM_TOKEN')
    WB_API_SUPPLY = os.getenv('WB_API_SUPPLY')
    ADMIN_CHANNEL_ID = os.getenv('ADMIN_CHANNEL_ID')

    if not TG_TOKEN or not WB_API_SUPPLY or not ADMIN_CHANNEL_ID:
        logger.error("–û—à–∏–±–∫–∞: TG_TOKEN –∏–ª–∏ API_KEY –∏–ª–∏ ADMIN_CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
        return

    bot = Bot(TG_TOKEN, WB_API_SUPPLY, ADMIN_CHANNEL_ID)
    bot.run()


if __name__ == '__main__':
    main()
